{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/DDMeshMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"./interface/IToken.sol\";\n\ncontract DDMeshMarket is AccessControl, Ownable {\n    //ad0ll: Recommend we create modifiers for \"onlyProvider\" and \"onlyUser\"\n    //ad0ll: We should consider making an agreement a contract instead instead of a struct. That way we could allow selfdestruct.\n    event AgreementCreated(\n        uint256 agreementId,\n        address userAddress,\n        address providerAddress,\n        uint256 providerId,\n        string encApiKey,\n        string encConnectionString\n    );\n    event AgreementClosed(\n        uint256 agreementId, address userAddress, address providerAddress, uint256 providerId, string encApiKey\n    );\n    event AgreementActivated(\n        uint256 agreementId,\n        address userAddress,\n        address providerAddress,\n        uint256 providerId,\n        string encApiKey,\n        string encConnectionString\n    );\n    event ProviderRegistered(uint256 id, address provider, uint256 fee, string encApiKey, string ensName);\n    event WithdrawReward(uint256 amount, address provider);\n    event WithdrawUserBalance(uint256 amount, address user);\n\n    IToken public token;\n\n    enum AgreementStatus {\n        NONE,\n        ENTERED,\n        ACTIVE,\n        CLOSED,\n        REVOKED,\n        ERROR\n    }\n\n    struct Agreement {\n        uint256 id;\n        address user;\n        uint256 userBalance;\n        address providerAddress;\n        uint256 providerId;\n        uint256 providerClaimed;\n        string encConnectionString;\n        uint256 startTimeStamp;\n        AgreementStatus status;\n    }\n\n    struct Provider {\n        uint256 id;\n        address pAddress;\n        uint256 fee; // DDM Tokens\n        string encApiKey;\n        string ensName;\n        string description;\n        uint256 noOfDbAgreements;\n        uint256 activeAgreements;\n    }\n\n    \n\n    uint256 public agreementIdTotalCount;\n    uint256 public providerIdTotalCount;\n\n    mapping(uint256 => Agreement) public agreementIdToAgreement; // mapping of agreement id to agreement\n    mapping(uint256 => Provider) public providerIdToProvider; // mapping of provider id to provider\n    mapping(address => Provider) public addressToProvider; // mapping of address to provider\n    mapping(address => uint256[]) public userAgreements; // mapping of user to agreements\n    mapping(address => uint256[]) public providerAgreements; // mapping of provider to agreements\n    mapping(uint256 => uint256[]) public providerIdToAgreements; // mapping of provider id to agreements\n    mapping(address => uint256) public providerToTVLAcrossAllAgreements; //Convenience mapping that shows how much value a provider is securing, used for leaderboard\n    uint256[] public agreements;\n    Provider[] public providers;\n\n    constructor(address _tokenAddress) Ownable(msg.sender) {\n        _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        token = IToken(_tokenAddress);\n    }\n\n    function getAgreement(uint256 _agreementId) public view returns (Agreement memory) {\n        return agreementIdToAgreement[_agreementId];\n    }\n\n    function getProviderByProviderId(uint256 _providerId) public view returns (Provider memory) {\n        return providerIdToProvider[_providerId];\n    }\n\n    function getProviderByAddress(address _providerAddress) public view returns (Provider memory) {\n        return addressToProvider[_providerAddress];\n    }\n\n    function getUserAgreements(address _userAddress) public view returns (uint256[] memory) {\n        return userAgreements[_userAddress];\n    }\n\n    function getProviderAgreements(address _providerAddress) public view returns (uint256[] memory) {\n        return providerAgreements[_providerAddress];\n    }\n\n    function getProviderIdToAgreements(uint256 _providerId) public view returns (uint256[] memory) {\n        return providerIdToAgreements[_providerId];\n    }\n\n    function getAllAgreements() public view returns (uint256[] memory) {\n        return agreements;\n    }\n\n    function getAllProviders() public view returns (Provider[] memory) {\n        return providers;\n    }\n\n    function getProviderTVLs() public view returns (address[] memory, uint256[] memory) {\n        uint256[] memory tvls = new uint256[](providers.length);\n        address[] memory providerAddresses = new address[](providers.length);\n        for (uint256 i = 0; i < providers.length; i++) {\n            providerAddresses[i] = providers[i].pAddress;\n            tvls[i] = providerToTVLAcrossAllAgreements[providers[i].pAddress];\n        }\n        return (providerAddresses, tvls);\n    }\n\n    function enterAgreement(uint256 _providerId, uint256 _amount) public {\n        require(_amount > 0, \"amount must be greater than 0\");\n        uint256 id = ++agreementIdTotalCount;\n        Provider memory provider = providerIdToProvider[_providerId];\n        require(provider.noOfDbAgreements > provider.activeAgreements, \"no of agreements exceeded\");\n        token.transferFrom(msg.sender, address(this), _amount);\n        Agreement memory agreement = Agreement(\n            id, msg.sender, _amount, provider.pAddress, _providerId, 0, \"\", block.timestamp, AgreementStatus.ENTERED\n        );\n\n        provider.activeAgreements += 1;\n\n        agreement.userBalance += _amount;\n        agreementIdToAgreement[id] = agreement;\n        agreements.push(id);\n        userAgreements[msg.sender].push(id);\n        providerAgreements[provider.pAddress].push(id);\n        providerIdToAgreements[_providerId].push(id);\n\n        // Increase provider TVL by fee (we'll render it in months in the UI)\n        providerToTVLAcrossAllAgreements[provider.pAddress] += provider.fee;\n        emit AgreementCreated(id, msg.sender, provider.pAddress, _providerId, provider.encApiKey, \"\");\n    }\n\n    function setConnectionStringAndActivateAgreement(uint256 _agreementId, string memory _encConnectionString) public {\n        Agreement storage agreement = agreementIdToAgreement[_agreementId];\n        require(agreement.id == _agreementId, \"agreement not found\");\n        require(agreement.status == AgreementStatus.ENTERED, \"agreement already activated\");\n        agreement.encConnectionString = _encConnectionString;\n        agreement.status = AgreementStatus.ACTIVE;\n        emit AgreementActivated(\n            agreement.id,\n            agreement.user,\n            agreement.providerAddress,\n            agreement.providerId,\n            agreement.encConnectionString,\n            _encConnectionString\n        );\n    }\n\n\n\n    function registerProvider(\n        uint256 _fee,\n        string memory _enc_apiKey,\n        string memory _ensName,\n        string memory _description,\n        uint256 _noOfDbAgreements\n    ) public {\n        // Require description < 256 characters\n        require(_fee > 0, \"fee must be greater than 0\");\n        uint256 id = ++agreementIdTotalCount;\n        Provider memory _provider = Provider(id, msg.sender, _fee, _enc_apiKey, _ensName, _description, _noOfDbAgreements, 0);\n        providerIdToProvider[id] = _provider;\n        providers.push(_provider);\n        emit ProviderRegistered(id, msg.sender, _fee, _enc_apiKey, _ensName);\n    }\n\n    // Provider can withdraw fee from user.\n    function withdrawReward(uint256 _amount, address _user, uint256 _agreementId) public {\n        // ad0ll: Later will want to only let them withdraw an amount equal to the the amount of time that the agreement has been active\n        address provider = msg.sender;\n        Agreement storage agreement = agreementIdToAgreement[_agreementId];\n        require(agreement.providerAddress == provider, \"provider not found\");\n        require(agreement.user == _user, \"not your user\");\n        require(agreement.userBalance >= _amount, \"insufficient balance\");\n\n        agreement.userBalance -= _amount;\n        agreement.providerClaimed += _amount;\n        token.transfer(msg.sender, _amount);\n\n        emit WithdrawReward(_amount, msg.sender);\n    }\n\n    function withdrawBalanceUser(uint256 _amount, uint256 _agreementId) public {\n        Agreement storage agreement = agreementIdToAgreement[_agreementId];\n        require(agreement.user == msg.sender, \"not your agreement\");\n        require(agreement.userBalance >= _amount, \"insufficient balance\");\n\n        agreement.userBalance -= _amount;\n        token.transfer(msg.sender, _amount);\n        emit WithdrawUserBalance(_amount, msg.sender);\n    }\n\n    function closeAgreementByUser(uint256 _agreementId) public {\n        Agreement memory agreement = agreementIdToAgreement[_agreementId];\n        Provider memory provider = providerIdToProvider[agreement.providerId];\n        require(agreement.user == msg.sender, \"not your agreement\");\n        require(agreement.status == AgreementStatus.ACTIVE, \"agreement is not active\");\n        agreement.status = AgreementStatus.CLOSED;\n        withdrawBalanceUser(agreement.userBalance, agreement.id);\n\n        // Decrease provider TVL by fee (we'll render it in months in the UI)\n        providerToTVLAcrossAllAgreements[provider.pAddress] -= provider.fee;\n        emit AgreementClosed(_agreementId, agreement.user, agreement.providerAddress, provider.id, provider.encApiKey);\n    }\n\n    function closeAgreementByProvider(uint256 _agreementId) public {\n        Agreement storage agreement = agreementIdToAgreement[_agreementId];\n        Provider memory provider = providerIdToProvider[agreement.providerId];\n        require(agreement.providerAddress == msg.sender, \"not your agreement, you are not the provider\");\n        require(agreement.status == AgreementStatus.ACTIVE, \"agreement is not active\");\n        agreement.status = AgreementStatus.CLOSED;\n        withdrawReward(agreement.userBalance, agreement.user, agreement.id);\n        // Decrease provider TVL by fee (we'll render it in months in the UI)\n        providerToTVLAcrossAllAgreements[provider.pAddress] -= provider.fee;\n        emit AgreementClosed(_agreementId, agreement.user, agreement.providerAddress, provider.id, provider.encApiKey);\n    }\n}\n\n// close the agreement.\n//Todo:\n// Provider can close only hen not enough funds\n// Calculation of how much time is passed and how much of the userbalance can be claimed by the provider.\n"
    },
    "contracts/interface/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.22;\n\ninterface IToken {\n  function mint(address to, uint256 amount) external;\n\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n\n  function balanceOf(address account) external returns (uint256);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}